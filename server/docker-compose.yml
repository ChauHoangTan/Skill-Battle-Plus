
services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - backend
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  elastic-search:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.2
    container_name: es
    ports:
      - "9200:9200"
    environment:
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}

  api-gateway:
    image: chauhoangtan/api-gateway:latest
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - eureka-service
      - user-service
      - quiz-service
      - question-service
      - notification-service
      - exam-service
      - battle-service
      - auth-service
      - analytics-service
      - admin-service
    networks:
      - backend

  eureka-service:
    image: chauhoangtan/eureka-service:latest
    build:
      context: .
      dockerfile: eureka-service/Dockerfile
    ports:
      - "8761:8761"
    networks:
      - backend

  user-service:
    image: chauhoangtan/user-service:latest
    build:
      context: .
      dockerfile: user-service/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - user-db
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${USER_DB_HOST}:${USER_DB_PORT}/${USER_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${USER_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${USER_DB_PASSWORD}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}

  user-db:
    image: postgres:17
    container_name: user-db
    restart: always
    environment:
      POSTGRES_DB: ${USER_DB_NAME}
      POSTGRES_USER: ${USER_DB_USERNAME}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
    ports:
      - "5433:5432"
    networks:
      - backend

  quiz-service:
    image: chauhoangtan/quiz-service:latest
    build:
      context: .
      dockerfile: quiz-service/Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      - quiz-db
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${QUIZ_DB_HOST}:${QUIZ_DB_PORT}/${QUIZ_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${QUIZ_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${QUIZ_DB_PASSWORD}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}

  quiz-db:
    image: postgres:17
    container_name: quiz-db
    restart: always
    environment:
      POSTGRES_DB: ${QUIZ_DB_NAME}
      POSTGRES_USER: ${QUIZ_DB_USERNAME}
      POSTGRES_PASSWORD: ${QUIZ_DB_PASSWORD}
    ports:
      - "5434:5432"
    networks:
      - backend

  question-service:
    image: chauhoangtan/question-service:latest
    build:
      context: .
      dockerfile: question-service/Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      - question-db
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${QUESTION_DB_HOST}:${QUESTION_DB_PORT}/${QUESTION_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${QUESTION_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${QUESTION_DB_PASSWORD}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}

  question-db:
    image: postgres:17
    container_name: question-db
    restart: always
    environment:
      POSTGRES_DB: ${QUESTION_DB_NAME}
      POSTGRES_USER: ${QUESTION_DB_USERNAME}
      POSTGRES_PASSWORD: ${QUESTION_DB_PASSWORD}
    ports:
      - "5435:5432"
    networks:
      - backend

  notification-service:
    image: chauhoangtan/notification-service:latest
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      - notification-db
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${NOTIFICATION_DB_HOST}:${NOTIFICATION_DB_PORT}/${NOTIFICATION_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${NOTIFICATION_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}

  notification-db:
    image: postgres:17
    container_name: notification-db
    restart: always
    environment:
      POSTGRES_DB: ${NOTIFICATION_DB_NAME}
      POSTGRES_USER: ${NOTIFICATION_DB_USERNAME}
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
    ports:
      - "5436:5432"
    networks:
      - backend

  exam-service:
    image: chauhoangtan/exam-service:latest
    build:
      context: .
      dockerfile: exam-service/Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      - exam-db
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${EXAM_DB_HOST}:${EXAM_DB_PORT}/${EXAM_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${EXAM_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${EXAM_DB_PASSWORD}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}

  exam-db:
    image: postgres:17
    container_name: exam-db
    restart: always
    environment:
      POSTGRES_DB: ${EXAM_DB_NAME}
      POSTGRES_USER: ${EXAM_DB_USERNAME}
      POSTGRES_PASSWORD: ${EXAM_DB_PASSWORD}
    ports:
      - "5437:5432"
    networks:
      - backend

  battle-service:
    image: chauhoangtan/battle-service:latest
    build:
      context: .
      dockerfile: battle-service/Dockerfile
    ports:
      - "8086:8086"
    depends_on:
      - battle-db
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${BATTLE_DB_HOST}:${BATTLE_DB_PORT}/${BATTLE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${BATTLE_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${BATTLE_DB_PASSWORD}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}

  battle-db:
    image: postgres:17
    container_name: battle-db
    restart: always
    environment:
      POSTGRES_DB: ${BATTLE_DB_NAME}
      POSTGRES_USER: ${BATTLE_DB_USERNAME}
      POSTGRES_PASSWORD: ${BATTLE_DB_PASSWORD}
    ports:
      - "5438:5432"
    networks:
      - backend

  auth-service:
    image: chauhoangtan/auth-service:latest
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    ports:
      - "8087:8087"
    depends_on:
      auth-db:
        condition: service_healthy
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${AUTH_DB_HOST}:${AUTH_DB_PORT}/${AUTH_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${AUTH_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${AUTH_DB_PASSWORD}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_REDIS_HOST: ${REDIS_HOST}
      SPRING_REDIS_PORT: ${REDIS_PORT}

  auth-db:
    image: postgres:17
    container_name: auth-db
    restart: always
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USERNAME}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    ports:
      - "5439:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${AUTH_DB_USERNAME} -d ${AUTH_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  analytics-service:
    image: chauhoangtan/analytics-service:latest
    build:
      context: .
      dockerfile: analytics-service/Dockerfile
    ports:
      - "8088:8088"
    depends_on:
      - analytics-db
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${ANALYTICS_DB_HOST}:${ANALYTICS_DB_PORT}/${ANALYTICS_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${ANALYTICS_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${ANALYTICS_DB_PASSWORD}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}

  analytics-db:
    image: postgres:17
    container_name: analytics-db
    restart: always
    environment:
      POSTGRES_DB: ${ANALYTICS_DB_NAME}
      POSTGRES_USER: ${ANALYTICS_DB_USERNAME}
      POSTGRES_PASSWORD: ${ANALYTICS_DB_PASSWORD}
    ports:
      - "5440:5432"
    networks:
      - backend

  admin-service:
    image: chauhoangtan/admin-service:latest
    build:
      context: .
      dockerfile: admin-service/Dockerfile
    ports:
      - "8089:8089"
    depends_on:
      - admin-db
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${ADMIN_DB_HOST}:${ADMIN_DB_PORT}/${ADMIN_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${ADMIN_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${ADMIN_DB_PASSWORD}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}

  admin-db:
    image: postgres:17
    container_name: admin-db
    restart: always
    environment:
      POSTGRES_DB: ${ADMIN_DB_NAME}
      POSTGRES_USER: ${ADMIN_DB_USERNAME}
      POSTGRES_PASSWORD: ${ADMIN_DB_PASSWORD}
    ports:
      - "5441:5432"
    networks:
      - backend

networks:
  backend:

volumes:
  rabbitmq_data:
